!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/6a65802/
Downloader	tracker.rs	/^    impl Downloader{ $/;"	c	module:downloader
Downloader	tracker.rs	/^    pub struct Downloader {$/;"	s	module:downloader
FileInfo	torrent_file.rs	/^    pub struct FileInfo {$/;"	s	module:torrent
Info	torrent_file.rs	/^    struct Info {$/;"	s	module:torrent
Torrent	torrent_file.rs	/^    impl Torrent {$/;"	c	module:torrent
Torrent	torrent_file.rs	/^    pub struct Torrent {$/;"	s	module:torrent
TorrentFile	torrent_file.rs	/^    impl TorrentFile {$/;"	c	module:torrent
TorrentFile	torrent_file.rs	/^    struct TorrentFile {$/;"	s	module:torrent
TrackerResponse	messages.rs	/^pub struct TrackerResponse {$/;"	s
announce	torrent_file.rs	/^        pub announce: String,$/;"	m	struct:torrent::Torrent
announce	torrent_file.rs	/^        pub announce: String,$/;"	m	struct:torrent::TorrentFile
download	torrent_file.rs	/^        pub async fn download(self) {$/;"	P	implementation:torrent::Torrent
download	tracker.rs	/^        pub async fn download(&mut self) {$/;"	P	implementation:downloader::Downloader
downloaded	tracker.rs	/^        downloaded: i64,$/;"	m	struct:downloader::Downloader
downloader	tracker.rs	/^pub mod downloader {$/;"	n
files	torrent_file.rs	/^        files: Option<Vec<FileInfo>>,$/;"	m	struct:torrent::Info
files	torrent_file.rs	/^        pub files: Vec<FileInfo>,$/;"	m	struct:torrent::Torrent
from_file	tracker.rs	/^        pub fn from_file(torrent: torrent::Torrent) -> Downloader {$/;"	P	implementation:downloader::Downloader
get_peerlist	tracker.rs	/^        async fn get_peerlist(&mut self) {$/;"	P	implementation:downloader::Downloader
info	torrent_file.rs	/^        pub info: Info,$/;"	m	struct:torrent::TorrentFile
info_hash	torrent_file.rs	/^        pub info_hash: Vec<u8>,$/;"	m	struct:torrent::Torrent
interval	messages.rs	/^    interval: i64,$/;"	m	struct:TrackerResponse
interval	tracker.rs	/^        interval: i64,$/;"	m	struct:downloader::Downloader
left	tracker.rs	/^        left: i64,$/;"	m	struct:downloader::Downloader
length	torrent_file.rs	/^        pub length: Option<i64>,$/;"	m	struct:torrent::Info
length	torrent_file.rs	/^        pub length: i64,$/;"	m	struct:torrent::FileInfo
main	main.rs	/^async fn main() {$/;"	f
messages	main.rs	/^mod messages;$/;"	n
name	torrent_file.rs	/^        pub name: String,$/;"	m	struct:torrent::Info
new	torrent_file.rs	/^        fn new(s: &str) -> Result<TorrentFile, serde_bencode::error::Error> {$/;"	P	implementation:torrent::TorrentFile
new	torrent_file.rs	/^    pub fn new(s: &str) -> Result<Torrent, &str> {$/;"	f	module:torrent
path	torrent_file.rs	/^        pub path: Vec<String>,$/;"	m	struct:torrent::FileInfo
peer_id	torrent_file.rs	/^        pub peer_id: Vec<u8>,$/;"	m	struct:torrent::Torrent
peer_list	tracker.rs	/^        peer_list: Vec<String>,$/;"	m	struct:downloader::Downloader
peers	messages.rs	/^    peers: Vec<String>,$/;"	m	struct:TrackerResponse
piece_length	torrent_file.rs	/^        pub piece_length: i64,$/;"	m	struct:torrent::Info
piece_length	torrent_file.rs	/^        pub piece_length: i64,$/;"	m	struct:torrent::Torrent
pieces	torrent_file.rs	/^        pub pieces: ByteBuf,$/;"	m	struct:torrent::Info
pieces	torrent_file.rs	/^        pub pieces: Vec<[u8; 20]>,$/;"	m	struct:torrent::Torrent
port	tracker.rs	/^        port: i64,$/;"	m	struct:downloader::Downloader
serialize_bytes	tracker.rs	/^    fn serialize_bytes(b: &Vec<u8>) -> String {$/;"	f	module:downloader
split_hash	torrent_file.rs	/^    pub fn split_hash(pieces: Vec<u8>) -> Vec<[u8; 20]> {$/;"	f	module:torrent
test_split	torrent_file.rs	/^    fn test_split() {$/;"	f	module:tests
tests	torrent_file.rs	/^mod tests {$/;"	n
torrent	torrent_file.rs	/^pub mod torrent {$/;"	n
torrent	tracker.rs	/^        torrent: torrent::Torrent,$/;"	m	struct:downloader::Downloader
torrent_file	main.rs	/^mod torrent_file;$/;"	n
tracker	main.rs	/^mod tracker;$/;"	n
uploaded	tracker.rs	/^        uploaded: i64,$/;"	m	struct:downloader::Downloader
